# 数据架构设计

## 一、数仓架构分层设计
    ods:通常被称为准备区，是后续数据仓库层加工数据的源头，同时ods层也存储着历史的增量或者全量的数据

    dw: 1.hadoop数据平台的主体，是ods层通过数据的etl清洗，转换，加载生成的。dw层通常是基于kimball维度建模理论来构建的，并且通过维度一致性和数据总线来保证各个主题的维度一致性
        2.下游用户将会直接使用dw层的数据，而ods层的数据原则上不允许下游用户直接接触和访问
        3.dw层除了基于kimball建模的最细粒度的明细表和维度表，还会基于它们生成一层汇总数据层，汇总层的设计主要是基于性能以及避免重复设计考虑

    dm: 1.在dw层的基础上，各个业务部门都可以在自己业务的基础上建立自己的集市，原则上不允许直接访问ods层，应用层只包含部门或者业务自己关心的明细层或汇总层的数据
        2.不同于dw层字段、指标的通用性，dm层可以包含自己业务或者部门特殊的指标或者字段，如果需要横向和其他部门表，需要用公共指标
        3.dm层一般由下游用户自己维护和开发，数据平台提供咨询和支持，拥有者还是下游用户

    ![一般的数仓架构图](https://www.yuque.com/docs/share/ca7416ff-85c5-428e-b957-01a282690f05#)

### 1.1分层设计的优势
    * 屏蔽源头系统的业务变更，系统变更对于下游用户的影响
    * 屏蔽源头业务系统的复杂性(表命名、字段命名、字段含义等)，需要规范和统一
    * 汇总层的引入以及反范式化的设计，避免了下游用户的重复计算，节省了用户的开发和精力，同时也节省了计算和存储
    * 数据仓库的可维护性

## 2.数据仓库的规范设计
关于规范问题，请参考之前的笔记[数仓设计规范](https://www.yuque.com/docs/share/75df451f-3174-4b73-ba8a-445764a63466#)

## 3.数据仓库构建实践流程
### 3.1kimball维度建模
    * 选择业务流程
    * 定义粒度
    * 确定维度
    * 确定事实
同时维度建模用维度一致性和数据仓库总线架构保证各个子主题维度数据的一致性

1.首先划分业务主题，很容易可以将其主题划分为销售域、库存域、客户服务域、事件域、采购域等，其次就是确定每个主题域的事实表和维度表
2.对于每个主题域，需要选择最细粒度的数据，很容易确定销售域的最细粒度的事实是购物小票的子项，库存域的最小事实是商品sku，客户服务的最小事实是一次电话呼叫，采购域的最小事实是某个商品的一次采购申请
3.确定好粒度之后，维度也基本确定好了，但是根据hadoop数仓反范式、扁平化的设计思想，需要确定那些字段需要反范式、扁平化设计到维度表中
4.最后一步确定事实表，明确是哪一种事实表，是事务事实表、周期快照事实表、累计快照事实表，和维度表的扁平化设计一样，也需要确定哪些字段需要反范式、扁平化设计到事实表中

#### 3.1.1维度表设计
1.维度表设计的首要问题就是维度表的拆分以及合并问题，由于业务问题，不同业务线对于商品某些定义可能不一致，需要设计主从维表的方式来处理
  如:商品的公共属性放在dim_pd_item中，旅游业务的相关字段放在dim_pd_item_trip中
2.对于缓慢变化维的问题，dim_pd_item可以通过快照和分区(ds)来解决，即每天存放一份全量的数据快照，存放的生命周期由业务需求决定
3.对于类目等有层级的商品属性、属性存在多值问题一般直接采用扁平化处理
4.可能还会存在一些行为维度（最近7天、最近30天的成交数据等）
5.出于属性扩展度的问题，可能还会包含jason和key_value等大字段，大字段引入带来扩展性，同时也增加了使用成本，使用便捷性降低，一次下游用户需要自己解析
  基于此，维度表的开发设计人员也必须对大字段所包含的字段以及提取方法进行仔细说明

#### 3.1.2事实表设计
1.以销售事实表为例：销售事实表将通过商品id，买家id，卖家id和其他维度关联
2.根据hadoop数仓反范式、扁平化的设计思想，除了度量以及维度外键id等字段，事实表还需要冗余一些常用字段


## 二、数据湖设计
大数据时代，数据量庞大、数据来源和类型的多元化、数据价值密度低，数据增长快速等特性使得传统数据库无法承载，因此需要一个新的架构作为大数据的支撑，而这种支撑就是数据湖
